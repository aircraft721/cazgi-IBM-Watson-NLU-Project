{"version":3,"sources":["EmotionTable.js","SentimentTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","entries","this","props","emotions","map","key","value","classname","scope","confidence","React","Component","SentimentTable","sentiments","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","sentimentData","data","result","entities","sendForEmotionAnalysis","emotionsData","confidenceData","emotion","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0aef7255.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    \n    render() {\n      return (  \n        <div>\n          <table className=\"table table-bordered\">\n            <tbody>\n            {\n                Object.entries(this.props.emotions).map(([key, value]) => {\n                    let classname = 'emotion-';\n                    switch (key) {\n                        case 'joy':\n                            classname += 'happy'\n                            break;\n                        case 'fear':\n                            classname += 'neutral'\n                            break;\n                        default:\n                            classname += 'sad'\n                            break;\n                    }\n                    return (\n                        <tr>\n                            <th className={classname} scope=\"row\">{key}</th>\n                            <td>{value}</td>\n                        </tr>\n                    )\n                })\n            }\n            \n            </tbody>\n          </table>\n          {this.props.confidence && (\n                <div className=\"confidence-wrapper\">\n                    <div>Confidence</div>\n                    <div>{this.props.confidence}</div>\n                </div>\n            )}\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;\n","import React from 'react';\nimport './bootstrap.min.css';\n\nclass SentimentTable extends React.Component {\n    \n    render() {\n      return (  \n        <div>\n          <table className=\"table table-bordered\">\n            <tbody>\n            {\n                Object.entries(this.props.sentiments).map(([key, value]) => {\n                    let classname = 'sentiment-';\n\n                    switch (value) {\n                        case 'positive':\n                            classname += 'positive'\n                            break;\n                        case 'negative':\n                            classname += 'negative'\n                            break;\n                        default:\n                            classname += 'meh'\n                            break;\n                    }\n                    return (\n                        <tr>\n                            <th scope=\"row\">{key}</th>\n                            <td className={key === 'label' && classname}>{value}</td>\n                        </tr>\n                    )\n                })\n            }\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default SentimentTable;\n","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\nimport SentimentTable from './SentimentTable';\n\nclass App extends React.Component {\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n            mode: \"text\",\n          sentimentOutput:[],\n          sentiment:true\n        }\n  \n  renderTextArea = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"url\") {\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"text\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    } \n  }\n\n  renderTextBox = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"text\") {\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"url\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    \n    }\n  }\n\n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    let ret = \"\";\n    let url = \".\";\n\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n    ret.then((response)=>{\n      let sentimentData;\n\n      if (this.state.mode === \"url\") {\n          sentimentData = response.data.result.entities[0].sentiment;\n      } else {\n        sentimentData = response.data.result.sentiment.document;\n      }\n        \n      this.setState({sentimentOutput:<SentimentTable sentiments={sentimentData}/>});\n    });\n  }\n\n  sendForEmotionAnalysis = () => {\n    this.setState({sentiment:false});\n    let ret = \"\";\n    let url = \".\";\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n\n    ret.then((response)=>{\n        let emotionsData;\n        let confidenceData;\n        if(this.state.mode === \"url\") {\n            emotionsData = response.data.result.entities[0].emotion;\n            confidenceData = response.data.result.entities[0].confidence;\n        } else {\n            emotionsData = response.data.result.emotion.document.emotion;\n        }\n\n      this.setState({sentimentOutput:<EmotionTable emotions={emotionsData} confidence={confidenceData}/>});\n  });\n  }\n  \n\n  render() {\n    return (  \n      <div className=\"App\">\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\n        <br/><br/>\n        {this.state.innercomp}\n        <br/>\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br/>\n            {this.state.sentimentOutput}\n      </div>\n    );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}